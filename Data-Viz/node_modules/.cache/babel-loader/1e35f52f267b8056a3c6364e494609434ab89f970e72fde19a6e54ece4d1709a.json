{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\stinger-delay\\\\Data-Viz\\\\src\\\\features\\\\routeView\\\\components\\\\ETAInfo.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ETAInfo = ({\n  predictions,\n  selectedStopId\n}) => {\n  const filtered = selectedStopId ? predictions.filter(p => p.stopId === selectedStopId) : predictions;\n  if (!filtered.length) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No upcoming buses or delay data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"ETA & Delay Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filtered.map(p => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Route \", p.routeId, \": ETA \", new Date(p.eta).toLocaleTimeString(), \" \\u2014 Delay \", p.predictedDelayMinutes, \" min\"]\n      }, `${p.routeId}-${p.stopId}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = ETAInfo;\nexport default ETAInfo;\nvar _c;\n$RefreshReg$(_c, \"ETAInfo\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ETAInfo","predictions","selectedStopId","filtered","filter","p","stopId","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","routeId","Date","eta","toLocaleTimeString","predictedDelayMinutes","_c","$RefreshReg$"],"sources":["C:/Users/Owner/stinger-delay/Data-Viz/src/features/routeView/components/ETAInfo.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { DelayPrediction } from \"@/types/delay\";\r\n\r\ninterface ETAInfoProps {\r\n  predictions: DelayPrediction[];\r\n  selectedStopId?: string;\r\n}\r\n\r\nconst ETAInfo: React.FC<ETAInfoProps> = ({ predictions, selectedStopId }) => {\r\n  const filtered = selectedStopId\r\n    ? predictions.filter((p) => p.stopId === selectedStopId)\r\n    : predictions;\r\n\r\n  if (!filtered.length) {\r\n    return <p>No upcoming buses or delay data available.</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>ETA & Delay Info</h3>\r\n      <ul>\r\n        {filtered.map((p) => (\r\n          <li key={`${p.routeId}-${p.stopId}`}>\r\n            Route {p.routeId}: ETA {new Date(p.eta).toLocaleTimeString()} â€”\r\n            Delay {p.predictedDelayMinutes} min\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ETAInfo;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ1B,MAAMC,OAA+B,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAe,CAAC,KAAK;EAC3E,MAAMC,QAAQ,GAAGD,cAAc,GAC3BD,WAAW,CAACG,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAKJ,cAAc,CAAC,GACtDD,WAAW;EAEf,IAAI,CAACE,QAAQ,CAACI,MAAM,EAAE;IACpB,oBAAOR,OAAA;MAAAS,QAAA,EAAG;IAA0C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1D;EAEA,oBACEb,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBb,OAAA;MAAAS,QAAA,EACGL,QAAQ,CAACU,GAAG,CAAER,CAAC,iBACdN,OAAA;QAAAS,QAAA,GAAqC,QAC7B,EAACH,CAAC,CAACS,OAAO,EAAC,QAAM,EAAC,IAAIC,IAAI,CAACV,CAAC,CAACW,GAAG,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAAC,gBACvD,EAACZ,CAAC,CAACa,qBAAqB,EAAC,MACjC;MAAA,GAHS,GAAGb,CAAC,CAACS,OAAO,IAAIT,CAAC,CAACC,MAAM,EAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAG/B,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACO,EAAA,GAtBInB,OAA+B;AAwBrC,eAAeA,OAAO;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}